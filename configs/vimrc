set nocompatible
let mapleader = " "

syntax enable                             " enable syntax highighting
filetype plugin on                        " detect filetype

" load vundle for managing plugin
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" =============================================================================
"  General 
" =============================================================================
set noswapfile
set encoding=utf-8
set clipboard=unnamed                     " use OS X clipboard 
set backspace=indent,eol,start

" =============================================================================
"  UI
" =============================================================================
set shortmess+=I                        " disable splash screen
set showmode                            " show current mode
set title                               " show file title in terminal tab
set cursorline                          " highlight current line
set laststatus=2                        " always show status line
set showcmd                             " show what commands you’re typing
set ruler                               " show current line and position
set wildmenu                            " visual tab-completion in statusline
set t_Co=256                            " 256 colours, please
let g:netrw_liststyle=3                 " my preferred explorer list style

" colorscheme
set background=dark
colorscheme solarized
call togglebg#map("<F12>")              " toggle solarized mode (light/dark)

" searching
set hlsearch                            " highlight search results
set incsearch                           " highlight while typing
set ignorecase                          " Ignore case when searching...
set smartcase                           " except if we input a capital letter

" splits
set splitright                          " Open new split panes to right...
set splitbelow											    " ...and bottom

" Set relative line numbers if we can...
if exists("+relativenumber")
    " Due to a problem with relative line numbers not persisting across new
    " tabs and splits, set no line numbers at all...
    set nonumber
    " ..then set relative ones.
    set relativenumber
" ...otherwise let’s just have regular ones.
else
    set number
endif

" =============================================================================
" Autocommand groups 
" =============================================================================
augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  au BufNewFile,BufRead *.md set filetype=markdown 
  au BufNewFile,BufRead *.json set filetype=javascript
	au BufRead,BufNewFile *.html5 set filetype=php

augroup END

" =============================================================================
"  text formatting
" =============================================================================
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set shiftround                   " round indent to nearest multiple of 2
set nowrap                       " no line-wrapping

" =============================================================================
" Searching in Files with the Silver Searcher 
" =============================================================================
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor              " Use ag over grep
endif

" =============================================================================
"  interactions
" =============================================================================
set scrolloff=3                       " scroll screen 3 lines before top/bottom
set sidescrolloff=5                   " same for left/right
set sidescroll=1
set whichwrap=h,l,b,<,>,~,[,]
set iskeyword-=_                      " underscores denote words

" =============================================================================
"  key mappings
" =============================================================================
" bind K to search for word under cursor
nnoremap K :Ag! "\b<C-R><C-W>\b"<CR>:cw<CR>
" jj to throw you into normal mode from insert mode
inoremap jj <esc>
" jk to throw you into normal mode from insert mode
inoremap jk <esc>
" make j and k work on wrapped lines
map j gj
map k gk
" reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv
" Disable arrow keys (hardcore)
map  <up>    <nop>
map  <down>  <nop>
map  <left>  <nop>
map  <right> <nop>
" Easier split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" =============================================================================
" plugin settings 
" =============================================================================
" CtrlP 
" see http://dougblack.io/words/a-good-vimrc.html
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" emmet
let g:user_emmet_expandabbr_key = '<C-B>'
let g:user_emmet_install_global = 0
autocmd FileType html,html5,css,scss EmmetInstall
"
" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif
