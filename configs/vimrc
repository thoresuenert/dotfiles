set nocompatible
let mapleader = " "

syntax on                                     " enable syntax high

" load vundle for managing plugin
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif


" =============================================================================
" General 
" =============================================================================
set autoread                                  " reload file after local changes
set nobackup                                  " no backups after quitting
set nowritebackup                             " no backups while working
set noswapfile                                " no swap files
set history=50                                " set history
set clipboard=unnamed                         " use OSX clipboard

" Keyboard
set backspace=indent,eol,start

" make :Explore look like NERDtree
let g:netrw_liststyle=3

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
set complete=.,w,t
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>


" =============================================================================
" UI 
" =============================================================================
set shortmess+=I                              " Disable splash screen
set ruler                                     " show cursor
set cursorline                                " highlight current line
set noerrorbells                              " no errormessages
set showmode                                  " show current mode
set showmatch                                 " show matching bracket
set showcmd                                   " show partial command
set ttyfast                                   " terminal connection 

" Colorscheme
colorscheme jellybeans

" Numbers
set relativenumber
set numberwidth=4

" Statusline
set laststatus=2                              "always show status line
set statusline=%f 
set statusline+=%{fugitive#statusline()}\   
set statusline+=\ [line\ %l\/%L]
set statusline+=%m 

" Searching
set hlsearch                                  " highlight search results 
set ignorecase                                " ignore case 
set smartcase                                 " unless there is a capital letter
set incsearch                                 " show incremental seraches

" Splits 
set splitbelow                                " open new splits below
set splitright                                " open new splits right


" =============================================================================
" Text formatting 
" =============================================================================
set tabstop=2                                 " one tab is two spaces
set shiftwidth=2                              " indent by two 
set expandtab                                 " tabs to spaces
set linebreak                                 " linebreak on words


" =============================================================================
" Autocommand groups 
" =============================================================================
augroup vimrcEx
  autocmd!

  " set tmuxline appearance
  " only if inside a tmux-session
  " otherwise $TERM would equal 'xterm-256color'
  if $TERM == 'screen-256color'
    au VimEnter * Tmuxline vim_statusline_1
  endif

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  au BufNewFile,BufRead *.md set filetype=markdown 
  au BufNewFile,BufRead *.json set filetype=javascript
  au BufNewFile,BufRead *.html5 set filetype=php


augroup END


" =============================================================================
" Mappings
" =============================================================================

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Making j and k work on wrapped lines
nnoremap k gk
nnoremap j gj

" use 'alt+a' & 'alt+l' to navigate between tabs
map ª <ESC>:tabprevious<CR>
map @ <ESC>:tabnext<CR>

" Mappings to move lines up/down
" funny looking characters are actually 'alt+j' & 'alt+k'
" http://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
" in Normal mode
nnoremap º :m .+1<CR>==
nnoremap ∆ :m .-2<CR>==

" in Insert mode
inoremap º <ESC>:m .+1<CR>==gi
inoremap ∆ <ESC>:m .-2<CR>==gi

" in Visual mode
vnoremap º :m '>+1<CR>gv=gv
vnoremap ∆ :m '<-2<CR>gv=gv

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Quickly get rid of search highlighting
nnoremap <leader><leader> :noh<cr>


" =============================================================================
" Searching in Files with the Silver Searcher 
" =============================================================================

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>


" =============================================================================
" Plugin Settings 
" =============================================================================

" emmet
let g:user_emmet_expandabbr_key = '€'
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss EmmetInstall

" airline
let g:airline_detect_whitespace=0             " disable whitespace extension
let g:airline_theme='raven'
let g:airline_left_sep=''                     " use 'straight' separators instead of < & > 
let g:airline_right_sep=''

" tmuxline
let g:tmuxline_powerline_separators = 0
